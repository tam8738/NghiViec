import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load m√¥ h√¨nh v√† scaler
model = joblib.load('logistic_model.pkl')
scaler = joblib.load('scaler.pkl')
feature_names = joblib.load('feature_names.pkl')

st.title("üîç D·ª± ƒëo√°n nh√¢n vi√™n c√≥ ngh·ªâ vi·ªác kh√¥ng")

# Giao di·ªán nh·∫≠p li·ªáu
st.header("Nh·∫≠p th√¥ng tin nh√¢n vi√™n:")

mucdohailong = st.slider("M·ª©c ƒë·ªô h√†i l√≤ng", 0.0, 1.0, 0.5)
danhgia_gannhat = st.slider("ƒê√°nh gi√° g·∫ßn nh·∫•t", 0.0, 1.0, 0.5)
soluong_duan = st.number_input("S·ªë l∆∞·ª£ng d·ª± √°n tham gia", 1, 10, 3)
sogiolam = st.number_input("S·ªë gi·ªù l√†m trung b√¨nh h√†ng th√°ng", 90, 350, 160)
sonam = st.number_input("S·ªë nƒÉm l√†m vi·ªác", 1, 15, 3)
thangchuc = st.selectbox("ƒê∆∞·ª£c thƒÉng ch·ª©c trong 5 nƒÉm?", [0, 1])
mucluong = st.selectbox("M·ª©c l∆∞∆°ng", ['low', 'medium', 'high'])
phongban = st.selectbox("Ph√≤ng ban", [
    'accounting', 'hr', 'IT', 'management', 'marketing', 
    'product_mng', 'RandD', 'sales', 'support', 'technical'
])

# M√£ h√≥a mucluong v√† phongban
mucluong_map = {'low': 0, 'medium': 1, 'high': 2}
mucluong_encoded = mucluong_map[mucluong]

# One-hot encoding cho phongban
phongban_cols = [name for name in feature_names if name.startswith('phongban_')]
phongban_dict = dict.fromkeys(phongban_cols, 0)

col_name = f'phongban_{phongban}'
if col_name in phongban_cols:
    phongban_dict[col_name] = 1

# T·∫°o dataframe ƒë·∫ßu v√†o
input_data = {
    'mucdohailong': mucdohailong,
    'danhgia_gannhat': danhgia_gannhat,
    'soluong_duanthamgia': soluong_duan,
    'sogiolamtrungbinh_hangthang': sogiolam,
    'sonamlamviec': sonam,
    'duocthangchuc_trong5nam': thangchuc,
    'mucluong': mucluong_encoded
}
input_data.update(phongban_dict)

X_input = pd.DataFrame([input_data])
X_input_scaled = scaler.transform(X_input)

# D·ª± ƒëo√°n
if st.button("D·ª± ƒëo√°n"):
    prediction = model.predict(X_input_scaled)[0]
    probabilities = model.predict_proba(X_input_scaled)[0]
    pct_no = probabilities[0] * 100
    pct_yes = probabilities[1] * 100

    st.subheader("üîé K·∫øt qu·∫£:")
    if prediction == 1:
        st.error(f"Nh√¢n vi√™n C√ì th·ªÉ ngh·ªâ vi·ªác ({pct_yes:.2f}%)")
    else:
        st.success(f"Nh√¢n vi√™n KH√îNG ngh·ªâ vi·ªác ({pct_no:.2f}%)")

    st.write(f"X√°c su·∫•t KH√îNG ngh·ªâ vi·ªác: **{pct_no:.2f}%**")
    st.write(f"X√°c su·∫•t C√ì th·ªÉ ngh·ªâ vi·ªác: **{pct_yes:.2f}%**")
